/*
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// User : 用户
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    /// 用户唯一标识
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// 用户所在平台
    #[serde(rename = "platform", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub platform: Option<Option<String>>,
    /// 用户所在平台的唯一标识
    #[serde(rename = "unionID", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub union_id: Option<Option<String>>,
    /// 昵称
    #[serde(rename = "nickName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nick_name: Option<Option<String>>,
    /// 头像
    #[serde(rename = "avatar", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<Option<String>>,
    /// 其他数据
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<String>>,
    /// 用户名
    #[serde(rename = "userName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<Option<String>>,
    /// 用户密码
    #[serde(rename = "pwd", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pwd: Option<Option<String>>,
    /// 邮箱地址
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    /// 邮箱已验证
    #[serde(rename = "emailIsValid", skip_serializing_if = "Option::is_none")]
    pub email_is_valid: Option<bool>,
    /// 手机号码
    #[serde(rename = "phone", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub phone: Option<Option<String>>,
    /// 手机号码已验证
    #[serde(rename = "phoneIsValid", skip_serializing_if = "Option::is_none")]
    pub phone_is_valid: Option<bool>,
    /// 关系链
    #[serde(rename = "relationChain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub relation_chain: Option<Option<String>>,
    /// 兴趣标签
    #[serde(rename = "interestTags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub interest_tags: Option<Option<String>>,
    /// 个人简介
    #[serde(rename = "biography", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub biography: Option<Option<String>>,
    /// 性别
    #[serde(rename = "gender", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gender: Option<Option<String>>,
    /// 生日
    #[serde(rename = "birthday", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub birthday: Option<Option<String>>,
    /// 职业
    #[serde(rename = "occupation", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub occupation: Option<Option<String>>,
    /// 学历
    #[serde(rename = "education", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub education: Option<Option<String>>,
    /// 联系方式
    #[serde(rename = "contact", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub contact: Option<Option<String>>,
    /// 语言
    #[serde(rename = "languages", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub languages: Option<Option<String>>,
    /// 社交网络链接
    #[serde(rename = "socialLinks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub social_links: Option<Option<String>>,
    /// 婚姻状态
    #[serde(rename = "relationshipStatus", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub relationship_status: Option<Option<String>>,
    /// 公司
    #[serde(rename = "company", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub company: Option<Option<String>>,
    /// 行业
    #[serde(rename = "industry", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub industry: Option<Option<String>>,
    /// 行业职位
    #[serde(rename = "companyPosition", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub company_position: Option<Option<String>>,
    /// 私密设置
    #[serde(rename = "privateSettings", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub private_settings: Option<Option<String>>,
    /// 账户是否锁定
    #[serde(rename = "isLock", skip_serializing_if = "Option::is_none")]
    pub is_lock: Option<bool>,
    /// 账户锁定截止时间
    #[serde(rename = "lockUntil", skip_serializing_if = "Option::is_none")]
    pub lock_until: Option<String>,
    /// 能使用用户名登录
    #[serde(rename = "enableUserNameSignIn", skip_serializing_if = "Option::is_none")]
    pub enable_user_name_sign_in: Option<bool>,
    /// 能使用邮箱登录
    #[serde(rename = "enableEmailSignIn", skip_serializing_if = "Option::is_none")]
    pub enable_email_sign_in: Option<bool>,
    /// 能使用电话号码登录
    #[serde(rename = "enablePhoneSignIn", skip_serializing_if = "Option::is_none")]
    pub enable_phone_sign_in: Option<bool>,
    /// 能使用联合身份标识登录
    #[serde(rename = "enableUnionIDSignIn", skip_serializing_if = "Option::is_none")]
    pub enable_union_id_sign_in: Option<bool>,
    /// 能使用OAuth认证方式登录
    #[serde(rename = "enableOAuth", skip_serializing_if = "Option::is_none")]
    pub enable_o_auth: Option<bool>,
    /// 启用双因素认证登录
    #[serde(rename = "enable2FAAuth", skip_serializing_if = "Option::is_none")]
    pub enable2_fa_auth: Option<bool>,
    /// 创建时间
    #[serde(rename = "createDate", skip_serializing_if = "Option::is_none")]
    pub create_date: Option<String>,
    /// 最后更新时间
    #[serde(rename = "lastUpdate", skip_serializing_if = "Option::is_none")]
    pub last_update: Option<String>,
}

impl User {
    /// 用户
    pub fn new() -> User {
        User {
            id: None,
            platform: None,
            union_id: None,
            nick_name: None,
            avatar: None,
            data: None,
            user_name: None,
            pwd: None,
            email: None,
            email_is_valid: None,
            phone: None,
            phone_is_valid: None,
            relation_chain: None,
            interest_tags: None,
            biography: None,
            gender: None,
            birthday: None,
            occupation: None,
            education: None,
            contact: None,
            languages: None,
            social_links: None,
            relationship_status: None,
            company: None,
            industry: None,
            company_position: None,
            private_settings: None,
            is_lock: None,
            lock_until: None,
            enable_user_name_sign_in: None,
            enable_email_sign_in: None,
            enable_phone_sign_in: None,
            enable_union_id_sign_in: None,
            enable_o_auth: None,
            enable2_fa_auth: None,
            create_date: None,
            last_update: None,
        }
    }
}

